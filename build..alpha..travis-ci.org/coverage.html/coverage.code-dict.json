{"/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/test.js":"/* istanbul instrument in package npmtest_ionic_native_transitions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/lib.npmtest_ionic_native_transitions.js":"/* istanbul instrument in package npmtest_ionic_native_transitions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ionic_native_transitions = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ionic_native_transitions = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ionic-native-transitions && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ionic_native_transitions */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ionic_native_transitions\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ionic_native_transitions.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ionic_native_transitions.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ionic_native_transitions.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ionic_native_transitions.__dirname + '/lib.npmtest_ionic_native_transitions.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/node_modules/ionic-native-transitions/dist/ionic-native-transitions.js":"/*!\n * ionic-native-transitions\n *  ---\n * Native transitions for Ionic applications\n * @version: v1.0.3\n * @author: shprink <contact@julienrenaux.fr>\n * @link: https://github.com/shprink/ionic-native-transitions\n * @license: MIT\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ionicNativeTransitions\"] = factory();\n\telse\n\t\troot[\"ionicNativeTransitions\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!**********************!*\\\n  !*** ./lib/index.js ***!\n  \\**********************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _providerJs = __webpack_require__(/*! ./provider.js */ 1);\n\t\n\tvar _providerJs2 = _interopRequireDefault(_providerJs);\n\t\n\tvar _nativeSrefJs = __webpack_require__(/*! ./nativeSref.js */ 2);\n\t\n\tvar _nativeSrefJs2 = _interopRequireDefault(_nativeSrefJs);\n\t\n\tvar _runJs = __webpack_require__(/*! ./run.js */ 3);\n\t\n\tvar _runJs2 = _interopRequireDefault(_runJs);\n\t\n\tvar mod = angular.module('ionic-native-transitions', ['ionic', 'ui.router']);\n\t\n\tmod.directive('nativeUiSref', _nativeSrefJs2['default']);\n\tmod.provider('$ionicNativeTransitions', _providerJs2['default']);\n\tmod.run(_runJs2['default']);\n\t\n\texports['default'] = mod = mod.name;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/*!*************************!*\\\n  !*** ./lib/provider.js ***!\n  \\*************************/\n/***/ function(module, exports) {\n\n\t/**\n\t * @ngdoc service\n\t * @name ionic-native-transitions.$ionicNativeTransitions\n\t * @description\n\t * ionic-native-transitions service\n\t */\n\t/**\n\t * @ngdoc service\n\t * @name ionic-native-transitions.$ionicNativeTransitionsProvider\n\t * @description\n\t * ionic-native-transitions provider\n\t */\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = function () {\n\t    'ngInject';\n\t\n\t    $get.$inject = [\"$log\", \"$ionicConfig\", \"$rootScope\", \"$timeout\", \"$state\", \"$location\", \"$ionicHistory\", \"$ionicPlatform\", \"$q\"];\n\t    var enabled = true,\n\t        $stateChangeStart = null,\n\t        $stateChangeSuccess = null,\n\t        $stateChangeError = null,\n\t        $stateAfterEnter = null,\n\t        oppositeDirections = {\n\t        up: 'down',\n\t        down: 'up',\n\t        left: 'right',\n\t        right: 'left'\n\t    },\n\t        defaultTransition = {\n\t        type: 'slide',\n\t        direction: 'left'\n\t    },\n\t        defaultBackTransition = {\n\t        type: 'slide',\n\t        direction: 'right'\n\t    },\n\t        defaultOptions = {\n\t        duration: 400, // in milliseconds (ms), default 400,\n\t        slowdownfactor: 4, // overlap views (higher number is more) or no overlap (1), default 4\n\t        iosdelay: -1, // ms to wait for the iOS webview to update before animation kicks in, default -1\n\t        androiddelay: -1, // same as above but for Android, default -1\n\t        winphonedelay: -1, // same as above but for Windows Phone, default -1,\n\t        fixedPixelsTop: 0, // the number of pixels of your fixed header, default 0 (iOS and Android)\n\t        fixedPixelsBottom: 0, // the number of pixels of your fixed footer (f.i. a tab bar), default 0 (iOS and Android),\n\t        triggerTransitionEvent: '$ionicView.afterEnter', // internal ionic-native-transitions option\n\t        backInOppositeDirection: false // Disable default back transition and uses the opposite transition to go back\n\t    };\n\t\n\t    return {\n\t        $get: $get,\n\t        enable: enable,\n\t        setDefaultTransition: setDefaultTransition,\n\t        setDefaultBackTransition: setDefaultBackTransition,\n\t        setDefaultOptions: setDefaultOptions\n\t    };\n\t\n\t    /**\n\t     * @ngdoc function\n\t     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#enable\n\t     * @access public\n\t     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n\t     *\n\t     * @description\n\t     * Overwrite default nativepagetransitions plugin options\n\t     * @param {object} injectedOptions  options that will overwrite defaults\n\t     */\n\t    function enable() {\n\t        var enabled = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\n\t        enable = enabled;\n\t        return this;\n\t    }\n\t\n\t    /**\n\t     * @ngdoc function\n\t     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#isEnabled\n\t     * @access public\n\t     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n\t     *\n\t     * @description\n\t     * Is ionic-native-transitions enabled or not?\n\t     */\n\t    /**\n\t     * @ngdoc function\n\t     * @name ionic-native-transitions.$ionicNativeTransitions#isEnabled\n\t     * @access public\n\t     * @methodOf ionic-native-transitions.$ionicNativeTransitions\n\t     *\n\t     * @description\n\t     * Is ionic-native-transitions enabled or not?\n\t     */\n\t    function isEnabled() {\n\t        if (window.cordova && window.plugins && window.plugins.nativepagetransitions) {\n\t            return enable;\n\t        }\n\t        return false;\n\t    }\n\t\n\t    /**\n\t     * @ngdoc function\n\t     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultOptions\n\t     * @access public\n\t     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n\t     *\n\t     * @description\n\t     * Overwrite default nativepagetransitions plugin options\n\t     * @param {object} injectedOptions  options that will overwrite defaults\n\t     */\n\t    function setDefaultOptions() {\n\t        var injectedOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        angular.extend(defaultOptions, injectedOptions);\n\t        return this;\n\t    }\n\t\n\t    /**\n\t     * @ngdoc function\n\t     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultTransition\n\t     * @access public\n\t     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n\t     *\n\t     * @description\n\t     * Overwrite default transitions\n\t     * @param {object} transitionOptions  options that will overwrite defaults\n\t     */\n\t    function setDefaultTransition() {\n\t        var transition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        angular.extend(defaultTransition, transition);\n\t        return this;\n\t    }\n\t\n\t    /**\n\t     * @ngdoc function\n\t     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultBackTransition\n\t     * @access public\n\t     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n\t     *\n\t     * @description\n\t     * Overwrite default back transitions\n\t     * @param {object} transitionOptions  options that will overwrite defaults\n\t     */\n\t    function setDefaultBackTransition() {\n\t        var transition = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        angular.extend(defaultBackTransition, transition);\n\t        return this;\n\t    }\n\t\n\t    function $get($log, $ionicConfig, $rootScope, $timeout, $state, $location, $ionicHistory, $ionicPlatform, $q) {\n\t        'ngInject';\n\t\n\t        var legacyGoBack = undefined,\n\t            backButtonUnregister = undefined,\n\t            transitioning = undefined;\n\t\n\t        return {\n\t            init: init,\n\t            getDefaultOptions: getDefaultOptions,\n\t            enable: enableFromService,\n\t            isEnabled: isEnabled,\n\t            transition: transition,\n\t            registerToRouteEvents: registerToRouteEvents,\n\t            unregisterToRouteEvents: unregisterToRouteEvents,\n\t            registerToStateChangeStartEvent: registerToStateChangeStartEvent,\n\t            unregisterToStateChangeStartEvent: unregisterToStateChangeStartEvent,\n\t            disablePendingTransition: disablePendingTransition,\n\t            locationUrl: locationUrl,\n\t            stateGo: stateGo,\n\t            goBack: goBack\n\t        };\n\t\n\t        /**\n\t         * @ngdoc function\n\t         * @name ionic-native-transitions.$ionicNativeTransitions#locationUrl\n\t         * @access public\n\t         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n\t         *\n\t         * @description\n\t         * Call location url and apply a native transition\n\t         * @param {string|null} url                 default:null\n\t         * @param {object|null} transitionOptions   default:null\n\t         */\n\t        function locationUrl() {\n\t            var url = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t            var transitionOptions = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\t\n\t            if (!url) {\n\t                $log.debug('[native transition] cannot change url without url...');\n\t                return;\n\t            }\n\t            unregisterToStateChangeStartEvent();\n\t\n\t            return transition(transitionOptions).then(function () {\n\t                return $location.url(url);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @ngdoc function\n\t         * @name ionic-native-transitions.$ionicNativeTransitions#stateGo\n\t         * @access public\n\t         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n\t         *\n\t         * @description\n\t         * Call state go and apply a native transition\n\t         * @param {string|null} state              default:null\n\t         * @param {object}      stateParams        default:{}\n\t         * @param {object}      stateOptions       default:{}\n\t         * @param {object|null} transitionOptions  default:null\n\t         */\n\t        function stateGo() {\n\t            var state = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t            var stateParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t            var stateOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t            var transitionOptions = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\t\n\t            if (!state) {\n\t                $log.debug('[native transition] cannot change state without a state...');\n\t                return;\n\t            }\n\t\n\t            if ($state.is(state, stateParams) && !stateOptions.reload) {\n\t                $log.debug('[native transition] same state transition are not possible');\n\t                return;\n\t            }\n\t\n\t            unregisterToStateChangeStartEvent();\n\t            return transition(transitionOptions).then(function () {\n\t                return $timeout(function () {\n\t                    return $state.go(state, stateParams, stateOptions);\n\t                });\n\t            });\n\t        }\n\t\n\t        /**\n\t         * @ngdoc function\n\t         * @name ionic-native-transitions.$ionicNativeTransitions#enable\n\t         * @access public\n\t         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n\t         *\n\t         * @description\n\t         * enable/disable plugin\n\t         * @param {boolean} enabled\n\t         * @param {boolean} disableIonicTransitions\n\t         * @param {string}  ionicTransitionType\n\t         */\n\t        function enableFromService() {\n\t            var enabled = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t            var disableIonicTransitions = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\t            var ionicTransitionType = arguments.length <= 2 || arguments[2] === undefined ? 'platform' : arguments[2];\n\t\n\t            if (enabled && !(window.cordova && window.plugins && window.plugins.nativepagetransitions)) {\n\t                $log.debug('[native transition] is disabled or nativepagetransitions plugin is not present');\n\t                return;\n\t            }\n\t            enable = enabled;\n\t\n\t            if (enabled) {\n\t                $log.debug('[native transition] enabling plugin');\n\t                if (window.plugins && window.plugins.nativepagetransitions) {\n\t                    angular.extend(window.plugins.nativepagetransitions.globalOptions, getDefaultOptions());\n\t                }\n\t                $rootScope.$ionicGoBack = goBack;\n\t                backButtonUnregister = $ionicPlatform.registerBackButtonAction(function (e, count) {\n\t                    return goBack(count);\n\t                }, 100);\n\t                registerToRouteEvents();\n\t            } else {\n\t                $log.debug('[native transition] disabling plugin');\n\t                if (typeof arguments[1] === 'undefined') {\n\t                    disableIonicTransitions = false;\n\t                }\n\t                $rootScope.$ionicGoBack = legacyGoBack;\n\t                if (angular.isFunction(backButtonUnregister)) {\n\t                    backButtonUnregister.call();\n\t                }\n\t                unregisterToRouteEvents();\n\t            }\n\t\n\t            if (disableIonicTransitions) {\n\t                $log.debug('[native transition] disabling ionic transitions');\n\t                $ionicConfig.views.transition('none');\n\t            } else {\n\t                $log.debug('[native transition] enabling ionic transitions');\n\t                $ionicConfig.views.transition(ionicTransitionType);\n\t            }\n\t\n\t            return this;\n\t        }\n\t\n\t        function transition() {\n\t            var defer = $q.defer();\n\t            if (!isEnabled()) {\n\t                return $q.when();\n\t            }\n\t            var options = {};\n\t            if (angular.isObject(arguments[0])) {\n\t                options = angular.extend({}, defaultBackTransition, arguments[0]);\n\t            } else if (angular.isString(arguments[0])) {\n\t                switch (arguments[0]) {\n\t                    case 'back':\n\t                        // First we check for state back transition\n\t                        if (arguments[2] && getBackStateTransition(arguments[2])) {\n\t                            options = getBackStateTransition(arguments[2]);\n\t                            console.log('back first', options);\n\t                        } // Then we check if the backInOppositeDirection option is enabled\n\t                        else if (getDefaultOptions().backInOppositeDirection && arguments[1] && getStateTransition(arguments[1])) {\n\t                                options = getStateTransition(arguments[1]);\n\t                                if (options.direction) {\n\t                                    options.direction = oppositeDirections[options.direction];\n\t                                }\n\t                                console.log('back second', options);\n\t                            } // otherwise we just use the default transition\n\t                            else {\n\t                                    options = defaultBackTransition;\n\t                                    console.log('back default', options);\n\t                                }\n\t                        break;\n\t                }\n\t            } else {\n\t                options = defaultTransition;\n\t            }\n\t            options = angular.copy(options);\n\t            $log.debug('[native transition]', options);\n\t            var type = options.type;\n\t            delete options.type;\n\t            $rootScope.$broadcast('ionicNativeTransitions.beforeTransition');\n\t\n\t            var me = this;\n\t            window.plugins.nativepagetransitions[type](options, function () {\n\t                transitionSuccess.bind(me, getTransitionDuration(options))();\n\t                defer.resolve();\n\t            }, function () {\n\t                transitionError.bind(me, getTransitionDuration(options))();\n\t                defer.reject();\n\t            });\n\t\n\t            return defer.promise;\n\t        }\n\t\n\t        function transitionSuccess(duration) {\n\t            setTimeout(function () {\n\t                return $rootScope.$broadcast('ionicNativeTransitions.success');\n\t            }, duration);\n\t        }\n\t\n\t        function transitionError(duration) {\n\t            setTimeout(function () {\n\t                return $rootScope.$broadcast('ionicNativeTransitions.error');\n\t            }, duration);\n\t        }\n\t\n\t        function getTransitionDuration(options) {\n\t            var duration = undefined;\n\t            if (options.duration) {\n\t                duration = parseInt(options.duration);\n\t            } else {\n\t                duration = parseInt(getDefaultOptions().duration);\n\t            }\n\t            if (ionic.Platform.isAndroid()) {\n\t                if (options.androiddelay) {\n\t                    duration += parseInt(options.androiddelay);\n\t                } else {\n\t                    duration += parseInt(getDefaultOptions().androiddelay);\n\t                }\n\t            } else if (ionic.Platform.isIOS()) {\n\t                if (options.iosdelay) {\n\t                    duration += parseInt(options.iosdelay);\n\t                } else {\n\t                    duration += parseInt(getDefaultOptions().iosdelay);\n\t                }\n\t            } else if (ionic.Platform.isWindowsPhone()) {\n\t                if (options.winphonedelay) {\n\t                    duration += parseInt(options.winphonedelay);\n\t                } else {\n\t                    duration += parseInt(getDefaultOptions().winphonedelay);\n\t                }\n\t            }\n\t            return duration;\n\t        }\n\t\n\t        function executePendingTransition() {\n\t            window.plugins.nativepagetransitions.executePendingTransition();\n\t            // $rootScope.$broadcast('ionicNativeTransitions.', executePendingTransition);\n\t            registerToStateChangeStartEvent();\n\t        }\n\t\n\t        function disablePendingTransition() {\n\t            // If native transition support cancelling transition (> 0.6.4), cancel pending transition\n\t            if (window.plugins && window.plugins.nativepagetransitions && angular.isFunction(window.plugins.nativepagetransitions.cancelPendingTransition)) {\n\t                window.plugins.nativepagetransitions.cancelPendingTransition();\n\t                registerToStateChangeStartEvent();\n\t            } else {\n\t                executePendingTransition();\n\t            }\n\t        }\n\t\n\t        function registerToRouteEvents() {\n\t            unregisterToRouteEvents();\n\t            registerToStateChangeStartEvent();\n\t            // $stateChangeSuccess = $rootScope.$on('$stateChangeSuccess', executePendingTransition);\n\t            $stateChangeError = $rootScope.$on('$stateChangeError', disablePendingTransition);\n\t            $stateAfterEnter = $rootScope.$on(getDefaultOptions().triggerTransitionEvent, executePendingTransition);\n\t        }\n\t\n\t        function registerToStateChangeStartEvent() {\n\t            if ($stateChangeStart) {\n\t                return;\n\t            }\n\t            $stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, stateOptions) {\n\t                var options = null;\n\t                // Abort if event was preventDefault'ed\n\t                if (event.defaultPrevented) {\n\t                    return;\n\t                }\n\t                if (transitioning) {\n\t                    transitioning = false;\n\t                    return;\n\t                }\n\t                // Disable native transition for this state\n\t                if (toState.nativeTransitions === null) {\n\t                    $log.debug('[native transition] transition disabled for this state', toState);\n\t                    return;\n\t                }\n\t                options = getStateTransition(toState);\n\t                $log.debug('[native transition] $stateChangeStart', toState, options);\n\t\n\t                transition(options).then(function () {\n\t                    transitioning = true;\n\t                    return $state.go(toState, toParams, stateOptions);\n\t                });\n\t\n\t                // For now, we will interrupt the transition\n\t                // We'll call $state.go after transition\n\t                event.preventDefault();\n\t            });\n\t        }\n\t\n\t        function getBackStateTransition(state) {\n\t            if (angular.isObject(state.nativeTransitionsBackIOS) && ionic.Platform.isIOS()) {\n\t                return angular.extend({}, state.nativeTransitionsBackIOS);\n\t            } else if (angular.isObject(state.nativeTransitionsBackAndroid) && ionic.Platform.isAndroid()) {\n\t                return angular.extend({}, state.nativeTransitionsBackAndroid);\n\t            } else if (angular.isObject(state.nativeTransitionsBackWindowsPhone) && ionic.Platform.isWindowsPhone()) {\n\t                return angular.extend({}, state.nativeTransitionsBackWindowsPhone);\n\t            } else if (angular.isObject(state.nativeTransitionsBack)) {\n\t                return angular.extend({}, state.nativeTransitionsBack);\n\t            }\n\t            return null;\n\t        }\n\t\n\t        function getStateTransition(state) {\n\t            if (angular.isObject(state.nativeTransitionsIOS) && ionic.Platform.isIOS()) {\n\t                return angular.extend({}, state.nativeTransitionsIOS);\n\t            } else if (angular.isObject(state.nativeTransitionsAndroid) && ionic.Platform.isAndroid()) {\n\t                return angular.extend({}, state.nativeTransitionsAndroid);\n\t            } else if (angular.isObject(state.nativeTransitionsWindowsPhone) && ionic.Platform.isWindowsPhone()) {\n\t                return angular.extend({}, state.nativeTransitionsWindowsPhone);\n\t            } else if (angular.isObject(state.nativeTransitions)) {\n\t                return angular.extend({}, state.nativeTransitions);\n\t            }\n\t            return null;\n\t        }\n\t\n\t        function unregisterToStateChangeStartEvent() {\n\t            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\n\t                $stateChangeStart();\n\t                $stateChangeStart = null;\n\t            }\n\t        }\n\t\n\t        function unregisterToRouteEvents() {\n\t            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\n\t                $stateChangeStart();\n\t                $stateChangeStart = null;\n\t            }\n\t            if ($stateChangeSuccess && angular.isFunction($stateChangeSuccess)) {\n\t                $stateChangeSuccess();\n\t                $stateChangeSuccess = null;\n\t            }\n\t            if ($stateChangeError && angular.isFunction($stateChangeError)) {\n\t                $stateChangeError();\n\t                $stateChangeError = null;\n\t            }\n\t            if ($stateAfterEnter && angular.isFunction($stateAfterEnter)) {\n\t                $stateAfterEnter();\n\t                $stateAfterEnter = null;\n\t            }\n\t        }\n\t\n\t        /**\n\t         * @ngdoc function\n\t         * @name ionic-native-transitions.$ionicNativeTransitions#getDefaultOptions\n\t         * @access public\n\t         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n\t         *\n\t         * @description\n\t         * Get default options\n\t         */\n\t        function getDefaultOptions() {\n\t            return defaultOptions;\n\t        }\n\t\n\t        /**\n\t         * @ngdoc function\n\t         * @name ionic-native-transitions.$ionicNativeTransitions#init\n\t         * @access public\n\t         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n\t         *\n\t         * @description\n\t         * Init nativepagetransitions plugin\n\t         */\n\t        function init() {\n\t            legacyGoBack = $rootScope.$ionicGoBack;\n\t            if (!isEnabled()) {\n\t                $log.debug('[native transition] The plugin is either disabled or nativepagetransitions plugin by telerik is not present. If you are getting this message in a browser, this is normal behavior, native transitions only work on device.');\n\t                return;\n\t            } else {\n\t                enableFromService();\n\t            }\n\t        }\n\t\n\t        /**\n\t         * @ngdoc function\n\t         * @name ionic-native-transitions.$ionicNativeTransitions#goBack\n\t         * @access public\n\t         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n\t         * @description Navigate back in the current history stack with a back navigation transition\n\t         * @param {number} backCount - The number of views to go back to. default will be the previous view\n\t         */\n\t        function goBack(backCount) {\n\t\n\t            if (!$ionicHistory.backView()) {\n\t                // Close the app when no more history\n\t                if (navigator.app) {\n\t                    navigator.app.exitApp();\n\t                }\n\t                return;\n\t            }\n\t            if (backCount >= 0) {\n\t                return;\n\t            }\n\t            var stateName = $ionicHistory.backView().stateName;\n\t\n\t            // Use backCount to find next state only if its defined, else pass as it is to $ionicHistory.goBack\n\t            // which defaults to previous view transition\n\t            // Get current history stack and find the cursor for the new view\n\t            // Based on the new cursor, find the new state to transition to\n\t            if (!!backCount && !isNaN(parseInt(backCount))) {\n\t                var viewHistory = $ionicHistory.viewHistory();\n\t                var currentHistory = viewHistory.histories[$ionicHistory.currentView().historyId];\n\t                var newCursor = currentHistory.cursor + backCount;\n\t\n\t                // If new cursor is more than the max possible or less than zero, default it to first view in history\n\t                if (newCursor < 0 || newCursor > currentHistory.stack.length) {\n\t                    newCursor = 0;\n\t                }\n\t\n\t                stateName = currentHistory.stack[newCursor].stateName;\n\t            }\n\t            var currentStateTransition = angular.extend({}, $state.current);\n\t            var toStateTransition = angular.extend({}, $state.get(stateName));\n\t\n\t            unregisterToStateChangeStartEvent();\n\t            if (toStateTransition.nativeTransitionsBack === null) {\n\t                $log.debug('[native transition] transition disabled for this state', toStateTransition);\n\t                return $timeout(function () {\n\t                    return $ionicHistory.goBack(backCount);\n\t                }).then(function () {\n\t                    return registerToStateChangeStartEvent();\n\t                });\n\t            }\n\t            $log.debug('nativepagetransitions goBack', backCount, stateName, currentStateTransition, toStateTransition);\n\t            return transition('back', currentStateTransition, toStateTransition).then(function () {\n\t                return $timeout(function () {\n\t                    return $ionicHistory.goBack(backCount);\n\t                });\n\t            });\n\t        }\n\t    }\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/*!***************************!*\\\n  !*** ./lib/nativeSref.js ***!\n  \\***************************/\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\texports['default'] = [\"$log\", \"$ionicNativeTransitions\", \"$state\", function ($log, $ionicNativeTransitions, $state) {\n\t    'ngInject';\n\t\n\t    controller.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$state\"];\n\t    return {\n\t        controller: controller,\n\t        restrict: 'A',\n\t        scope: false\n\t    };\n\t\n\t    function controller($scope, $element, $attrs, $state) {\n\t        'ngInject';\n\t\n\t        var stateOptions = $scope.$eval($attrs.nativeUiSrefOpts) || {};\n\t        var nativeOptions = null;\n\t\n\t        $attrs.$observe('nativeOptions', function (newOptions) {\n\t            var evalOptions = $scope.$eval(newOptions);\n\t            nativeOptions = angular.isObject(evalOptions) ? evalOptions : {};\n\t        });\n\t\n\t        $element.on('click', function (event) {\n\t            var ref = parseStateRef($attrs.nativeUiSref, $state.current.name);\n\t            var params = angular.copy($scope.$eval(ref.paramExpr));\n\t            if (!$ionicNativeTransitions.isEnabled()) {\n\t                $state.go(ref.state, params, stateOptions);\n\t                return;\n\t            }\n\t\n\t            $ionicNativeTransitions.stateGo(ref.state, params, stateOptions, nativeOptions);\n\t        });\n\t    }\n\t}];\n\t\n\tfunction parseStateRef(ref, current) {\n\t    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/),\n\t        parsed;\n\t    if (preparsed) ref = current + '(' + preparsed[1] + ')';\n\t    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n\t    if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n\t    return {\n\t        state: parsed[1],\n\t        paramExpr: parsed[3] || null\n\t    };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/*!********************!*\\\n  !*** ./lib/run.js ***!\n  \\********************/\n/***/ function(module, exports) {\n\n\t/**\n\t * @ngdoc service\n\t * @name ionic-native-transitions.$ionicNativeTransitions\n\t * @description\n\t * ionic-native-transitions service\n\t */\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\texports['default'] = [\"$ionicNativeTransitions\", \"$ionicPlatform\", \"$ionicHistory\", \"$rootScope\", function ($ionicNativeTransitions, $ionicPlatform, $ionicHistory, $rootScope) {\n\t  'ngInject';\n\t\n\t  $ionicPlatform.ready(function () {\n\t    $ionicNativeTransitions.init();\n\t  });\n\t}];\n\t\n\t;\n\tmodule.exports = exports['default'];\n\t/**\n\t * @ngdoc service\n\t * @name ionic-native-transitions.$ionicNativeTransitionsProvider\n\t * @description\n\t * ionic-native-transitions provider\n\t */\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=ionic-native-transitions.js.map","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/node_modules/ionic-native-transitions/webpack.config.js":"var path = require('path'),\n    testPath = path.join(__dirname, 'test'),\n    wwwPath = path.join(__dirname, 'www'),\n    docsPath = path.join(__dirname, 'docs'),\n    pkg = require('./package.json'),\n    HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: path.join(testPath, 'index.js'),\n    output: {\n        path: wwwPath,\n        filename: 'test.js'\n    },\n    module: {\n        loaders: [{\n            test: /[\\/]angular\\.js$/,\n            loader: 'expose?angular!exports?window.angular'\n        }, {\n            test: /\\.json$/,\n            loader: \"json\"\n        }, {\n            test: /\\.css$/,\n            loader: \"style!css\"\n        }, {\n            test: [/ionicons\\.svg/, /ionicons\\.eot/, /ionicons\\.ttf/, /ionicons\\.woff/],\n            loader: 'file?name=fonts/[name].[ext]'\n        }, {\n            test: /\\.js$/,\n            exclude: /(node_modules|bower_components)/,\n            loader: \"ng-annotate?add=true!babel\"\n        }]\n    },\n    plugins: [new HtmlWebpackPlugin({\n        filename: 'index.html',\n        pkg: pkg,\n        template: path.join(testPath, 'index.html')\n    })]\n};\n","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/node_modules/ionic-native-transitions/lib/index.js":"import Provider from './provider.js';\nimport nativeSref from './nativeSref.js';\nimport Run from './run.js';\n\nlet mod = angular.module('ionic-native-transitions', [\n    'ionic',\n    'ui.router'\n]);\n\nmod.directive('nativeUiSref', nativeSref);\nmod.provider('$ionicNativeTransitions', Provider);\nmod.run(Run);\n\nexport default mod = mod.name;\n","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/node_modules/ionic-native-transitions/lib/nativeSref.js":"export default function($log, $ionicNativeTransitions, $state) {\n    'ngInject';\n\n    return {\n        controller: controller,\n        restrict: 'A',\n        scope: false\n    };\n\n    function controller($scope, $element, $attrs, $state) {\n        'ngInject';\n\n        let stateOptions = $scope.$eval($attrs.nativeUiSrefOpts) || {};\n        let nativeOptions = null;\n\n        $attrs.$observe('nativeOptions', (newOptions) => {\n            let evalOptions = $scope.$eval(newOptions);\n            nativeOptions = angular.isObject(evalOptions) ? evalOptions : {};\n        });\n\n        $element.on('click', (event) => {\n            let ref = parseStateRef($attrs.nativeUiSref, $state.current.name);\n            let params = angular.copy($scope.$eval(ref.paramExpr));\n            if (!$ionicNativeTransitions.isEnabled()) {\n                $state.go(ref.state, params, stateOptions);\n                return;\n            }\n\n            $ionicNativeTransitions.stateGo(ref.state, params, stateOptions, nativeOptions);\n        });\n    }\n}\n\nfunction parseStateRef(ref, current) {\n    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/),\n        parsed;\n    if (preparsed) ref = current + '(' + preparsed[1] + ')';\n    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n    if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n    return {\n        state: parsed[1],\n        paramExpr: parsed[3] || null\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/node_modules/ionic-native-transitions/lib/provider.js":"/**\n * @ngdoc service\n * @name ionic-native-transitions.$ionicNativeTransitions\n * @description\n * ionic-native-transitions service\n */\n/**\n * @ngdoc service\n * @name ionic-native-transitions.$ionicNativeTransitionsProvider\n * @description\n * ionic-native-transitions provider\n */\nexport default function () {\n    'ngInject';\n\n    let enabled = true,\n        $stateChangeStart = null,\n        $stateChangeSuccess = null,\n        $stateChangeError = null,\n        $stateAfterEnter = null,\n        oppositeDirections = {\n            up: 'down',\n            down: 'up',\n            left: 'right',\n            right: 'left'\n        },\n        defaultTransition = {\n            type: 'slide',\n            direction: 'left'\n        },\n        defaultBackTransition = {\n            type: 'slide',\n            direction: 'right'\n        },\n        defaultOptions = {\n            duration: 400, // in milliseconds (ms), default 400,\n            slowdownfactor: 4, // overlap views (higher number is more) or no overlap (1), default 4\n            iosdelay: -1, // ms to wait for the iOS webview to update before animation kicks in, default -1\n            androiddelay: -1, // same as above but for Android, default -1\n            winphonedelay: -1, // same as above but for Windows Phone, default -1,\n            fixedPixelsTop: 0, // the number of pixels of your fixed header, default 0 (iOS and Android)\n            fixedPixelsBottom: 0, // the number of pixels of your fixed footer (f.i. a tab bar), default 0 (iOS and Android),\n            triggerTransitionEvent: '$ionicView.afterEnter', // internal ionic-native-transitions option\n            backInOppositeDirection: false // Disable default back transition and uses the opposite transition to go back\n        };\n\n    return {\n        $get,\n        enable,\n        setDefaultTransition,\n        setDefaultBackTransition,\n        setDefaultOptions\n    };\n\n    /**\n     * @ngdoc function\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#enable\n     * @access public\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n     *\n     * @description\n     * Overwrite default nativepagetransitions plugin options\n     * @param {object} injectedOptions  options that will overwrite defaults\n     */\n    function enable(enabled = true) {\n        enable = enabled;\n        return this;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#isEnabled\n     * @access public\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n     *\n     * @description\n     * Is ionic-native-transitions enabled or not?\n     */\n    /**\n     * @ngdoc function\n     * @name ionic-native-transitions.$ionicNativeTransitions#isEnabled\n     * @access public\n     * @methodOf ionic-native-transitions.$ionicNativeTransitions\n     *\n     * @description\n     * Is ionic-native-transitions enabled or not?\n     */\n    function isEnabled() {\n        if (window.cordova && window.plugins && window.plugins.nativepagetransitions) {\n            return enable;\n        }\n        return false;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultOptions\n     * @access public\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n     *\n     * @description\n     * Overwrite default nativepagetransitions plugin options\n     * @param {object} injectedOptions  options that will overwrite defaults\n     */\n    function setDefaultOptions(injectedOptions = {}) {\n        angular.extend(defaultOptions, injectedOptions);\n        return this;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultTransition\n     * @access public\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n     *\n     * @description\n     * Overwrite default transitions\n     * @param {object} transitionOptions  options that will overwrite defaults\n     */\n    function setDefaultTransition(transition = {}) {\n        angular.extend(defaultTransition, transition);\n        return this;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ionic-native-transitions.$ionicNativeTransitionsProvider#setDefaultBackTransition\n     * @access public\n     * @methodOf ionic-native-transitions.$ionicNativeTransitionsProvider\n     *\n     * @description\n     * Overwrite default back transitions\n     * @param {object} transitionOptions  options that will overwrite defaults\n     */\n    function setDefaultBackTransition(transition = {}) {\n        angular.extend(defaultBackTransition, transition);\n        return this;\n    }\n\n    function $get($log, $ionicConfig, $rootScope, $timeout, $state, $location, $ionicHistory, $ionicPlatform, $q) {\n        'ngInject';\n\n        let legacyGoBack, backButtonUnregister, transitioning;\n\n        return {\n            init,\n            getDefaultOptions,\n            enable: enableFromService,\n            isEnabled,\n            transition,\n            registerToRouteEvents,\n            unregisterToRouteEvents,\n            registerToStateChangeStartEvent,\n            unregisterToStateChangeStartEvent,\n            disablePendingTransition,\n            locationUrl,\n            stateGo,\n            goBack\n        };\n\n\n        /**\n         * @ngdoc function\n         * @name ionic-native-transitions.$ionicNativeTransitions#locationUrl\n         * @access public\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n         *\n         * @description\n         * Call location url and apply a native transition\n         * @param {string|null} url                 default:null\n         * @param {object|null} transitionOptions   default:null\n         */\n        function locationUrl(url = null, transitionOptions = null) {\n            if (!url) {\n                $log.debug('[native transition] cannot change url without url...');\n                return;\n            }\n            unregisterToStateChangeStartEvent();\n\n            return transition(transitionOptions).then(function(){\n              return $location.url(url);\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name ionic-native-transitions.$ionicNativeTransitions#stateGo\n         * @access public\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n         *\n         * @description\n         * Call state go and apply a native transition\n         * @param {string|null} state              default:null\n         * @param {object}      stateParams        default:{}\n         * @param {object}      stateOptions       default:{}\n         * @param {object|null} transitionOptions  default:null\n         */\n        function stateGo(state = null, stateParams = {}, stateOptions = {}, transitionOptions = null) {\n            if (!state) {\n                $log.debug('[native transition] cannot change state without a state...');\n                return;\n            }\n\n            if ($state.is(state, stateParams) && !stateOptions.reload) {\n                $log.debug('[native transition] same state transition are not possible');\n                return;\n            }\n\n            unregisterToStateChangeStartEvent();\n            return transition(transitionOptions).then(function(){\n              return $timeout(() => $state.go(state, stateParams, stateOptions));\n            });\n            \n        }\n\n        /**\n         * @ngdoc function\n         * @name ionic-native-transitions.$ionicNativeTransitions#enable\n         * @access public\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n         *\n         * @description\n         * enable/disable plugin\n         * @param {boolean} enabled\n         * @param {boolean} disableIonicTransitions\n         * @param {string}  ionicTransitionType\n         */\n        function enableFromService(enabled = true, disableIonicTransitions = true, ionicTransitionType = 'platform') {\n            if (enabled && !(window.cordova && window.plugins && window.plugins.nativepagetransitions)) {\n                $log.debug('[native transition] is disabled or nativepagetransitions plugin is not present');\n                return;\n            }\n            enable = enabled;\n\n            if (enabled) {\n                $log.debug('[native transition] enabling plugin');\n                if (window.plugins && window.plugins.nativepagetransitions) {\n                    angular.extend(window.plugins.nativepagetransitions.globalOptions, getDefaultOptions());\n                }\n                $rootScope.$ionicGoBack = goBack;\n                backButtonUnregister = $ionicPlatform.registerBackButtonAction((e, count) => goBack(count), 100);\n                registerToRouteEvents();\n            } else {\n                $log.debug('[native transition] disabling plugin');\n                if (typeof arguments[1] === 'undefined') {\n                    disableIonicTransitions = false;\n                }\n                $rootScope.$ionicGoBack = legacyGoBack;\n                if (angular.isFunction(backButtonUnregister)) {\n                    backButtonUnregister.call();\n                }\n                unregisterToRouteEvents();\n            }\n\n            if (disableIonicTransitions) {\n                $log.debug('[native transition] disabling ionic transitions');\n                $ionicConfig.views.transition('none');\n            } else {\n                $log.debug('[native transition] enabling ionic transitions');\n                $ionicConfig.views.transition(ionicTransitionType);\n            }\n\n            return this;\n        }\n\n        function transition() {\n            var defer = $q.defer();\n            if (!isEnabled()) {\n                return $q.when();\n            }\n            let options = {}\n            if (angular.isObject(arguments[0])) {\n                options = angular.extend({}, defaultBackTransition, arguments[0])\n            } else if (angular.isString(arguments[0])) {\n                switch (arguments[0]) {\n                    case 'back':\n                        // First we check for state back transition\n                        if (arguments[2] && getBackStateTransition(arguments[2])) {\n                            options = getBackStateTransition(arguments[2]);\n                            console.log('back first', options)\n                        } // Then we check if the backInOppositeDirection option is enabled\n                        else if (getDefaultOptions().backInOppositeDirection && arguments[1] && getStateTransition(arguments[1])) {\n                            options = getStateTransition(arguments[1]);\n                            if (options.direction) {\n                                options.direction = oppositeDirections[options.direction];\n                            }\n                            console.log('back second', options)\n\n                        } // otherwise we just use the default transition\n                        else {\n                            options = defaultBackTransition;\n                            console.log('back default', options)\n                        }\n                        break;\n                }\n            } else {\n                options = defaultTransition;\n            }\n            options = angular.copy(options);\n            $log.debug('[native transition]', options);\n            let type = options.type;\n            delete options.type;\n            $rootScope.$broadcast('ionicNativeTransitions.beforeTransition');\n            \n            var me = this;\n            window.plugins.nativepagetransitions[type](\n                options,\n                function(){\n                  transitionSuccess.bind(me, getTransitionDuration(options))();\n                  defer.resolve();\n                },\n                function(){\n                  transitionError.bind(me, getTransitionDuration(options))();\n                  defer.reject();\n                }\n            )\n            \n            return defer.promise;\n        }\n\n        function transitionSuccess(duration) {\n            setTimeout(() => $rootScope.$broadcast('ionicNativeTransitions.success'), duration);\n        }\n\n        function transitionError(duration) {\n            setTimeout(() => $rootScope.$broadcast('ionicNativeTransitions.error'), duration);\n        }\n\n        function getTransitionDuration(options) {\n            let duration;\n            if (options.duration) {\n                duration = parseInt(options.duration);\n            } else {\n                duration = parseInt(getDefaultOptions().duration);\n            }\n            if (ionic.Platform.isAndroid()) {\n                if (options.androiddelay) {\n                    duration += parseInt(options.androiddelay);\n                } else {\n                    duration += parseInt(getDefaultOptions().androiddelay);\n                }\n            } else if (ionic.Platform.isIOS()) {\n                if (options.iosdelay) {\n                    duration += parseInt(options.iosdelay);\n                } else {\n                    duration += parseInt(getDefaultOptions().iosdelay);\n                }\n            } else if (ionic.Platform.isWindowsPhone()) {\n                if (options.winphonedelay) {\n                    duration += parseInt(options.winphonedelay);\n                } else {\n                    duration += parseInt(getDefaultOptions().winphonedelay);\n                }\n            }\n            return duration;\n        }\n\n        function executePendingTransition() {\n            window.plugins.nativepagetransitions.executePendingTransition();\n            // $rootScope.$broadcast('ionicNativeTransitions.', executePendingTransition);\n            registerToStateChangeStartEvent();\n        }\n\n        function disablePendingTransition() {\n            // If native transition support cancelling transition (> 0.6.4), cancel pending transition\n            if (window.plugins && window.plugins.nativepagetransitions && angular.isFunction(window.plugins.nativepagetransitions.cancelPendingTransition)) {\n                window.plugins.nativepagetransitions.cancelPendingTransition();\n                registerToStateChangeStartEvent();\n            } else {\n                executePendingTransition();\n            }\n        }\n\n        function registerToRouteEvents() {\n            unregisterToRouteEvents();\n            registerToStateChangeStartEvent();\n            // $stateChangeSuccess = $rootScope.$on('$stateChangeSuccess', executePendingTransition);\n            $stateChangeError = $rootScope.$on('$stateChangeError', disablePendingTransition);\n            $stateAfterEnter = $rootScope.$on(getDefaultOptions().triggerTransitionEvent, executePendingTransition);\n        }\n\n        function registerToStateChangeStartEvent() {\n            if ($stateChangeStart) {\n                return;\n            }\n            $stateChangeStart = $rootScope.$on('$stateChangeStart', (event, toState, toParams, fromState, fromParams, stateOptions) => {\n                let options = null;\n                // Abort if event was preventDefault'ed\n                if (event.defaultPrevented) {\n                    return;\n                }\n                if(transitioning){\n                  transitioning = false;\n                  return;\n                }\n                // Disable native transition for this state\n                if (toState.nativeTransitions === null) {\n                    $log.debug('[native transition] transition disabled for this state', toState);\n                    return;\n                }\n                options = getStateTransition(toState);\n                $log.debug('[native transition] $stateChangeStart', toState, options);\n                \n                transition(options).then(function(){\n                  transitioning = true;\n                  return $state.go(toState, toParams, stateOptions);\n                });\n                \n                // For now, we will interrupt the transition \n                // We'll call $state.go after transition\n                event.preventDefault();\n            });\n        }\n\n        function getBackStateTransition(state) {\n            if (angular.isObject(state.nativeTransitionsBackIOS) && ionic.Platform.isIOS()) {\n                return angular.extend({}, state.nativeTransitionsBackIOS);\n            } else if (angular.isObject(state.nativeTransitionsBackAndroid) && ionic.Platform.isAndroid()) {\n                return angular.extend({}, state.nativeTransitionsBackAndroid);\n            } else if (angular.isObject(state.nativeTransitionsBackWindowsPhone) && ionic.Platform.isWindowsPhone()) {\n                return angular.extend({}, state.nativeTransitionsBackWindowsPhone);\n            } else if (angular.isObject(state.nativeTransitionsBack)) {\n                return angular.extend({}, state.nativeTransitionsBack);\n            }\n            return null;\n        }\n\n        function getStateTransition(state) {\n            if (angular.isObject(state.nativeTransitionsIOS) && ionic.Platform.isIOS()) {\n                return angular.extend({}, state.nativeTransitionsIOS);\n            } else if (angular.isObject(state.nativeTransitionsAndroid) && ionic.Platform.isAndroid()) {\n                return angular.extend({}, state.nativeTransitionsAndroid);\n            } else if (angular.isObject(state.nativeTransitionsWindowsPhone) && ionic.Platform.isWindowsPhone()) {\n                return angular.extend({}, state.nativeTransitionsWindowsPhone);\n            } else if (angular.isObject(state.nativeTransitions)) {\n                return angular.extend({}, state.nativeTransitions);\n            }\n            return null;\n        }\n\n        function unregisterToStateChangeStartEvent() {\n            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\n                $stateChangeStart();\n                $stateChangeStart = null;\n            }\n        }\n\n        function unregisterToRouteEvents() {\n            if ($stateChangeStart && angular.isFunction($stateChangeStart)) {\n                $stateChangeStart();\n                $stateChangeStart = null;\n            }\n            if ($stateChangeSuccess && angular.isFunction($stateChangeSuccess)) {\n                $stateChangeSuccess();\n                $stateChangeSuccess = null;\n            }\n            if ($stateChangeError && angular.isFunction($stateChangeError)) {\n                $stateChangeError();\n                $stateChangeError = null;\n            }\n            if ($stateAfterEnter && angular.isFunction($stateAfterEnter)) {\n                $stateAfterEnter();\n                $stateAfterEnter = null;\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name ionic-native-transitions.$ionicNativeTransitions#getDefaultOptions\n         * @access public\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n         *\n         * @description\n         * Get default options\n         */\n        function getDefaultOptions() {\n            return defaultOptions;\n        }\n\n        /**\n         * @ngdoc function\n         * @name ionic-native-transitions.$ionicNativeTransitions#init\n         * @access public\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n         *\n         * @description\n         * Init nativepagetransitions plugin\n         */\n        function init() {\n            legacyGoBack = $rootScope.$ionicGoBack;\n            if (!isEnabled()) {\n                $log.debug('[native transition] The plugin is either disabled or nativepagetransitions plugin by telerik is not present. If you are getting this message in a browser, this is normal behavior, native transitions only work on device.');\n                return;\n            } else {\n                enableFromService();\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name ionic-native-transitions.$ionicNativeTransitions#goBack\n         * @access public\n         * @methodOf ionic-native-transitions.$ionicNativeTransitions\n         * @description Navigate back in the current history stack with a back navigation transition\n         * @param {number} backCount - The number of views to go back to. default will be the previous view\n         */\n        function goBack(backCount) {\n\n            if (!$ionicHistory.backView()) {\n                // Close the app when no more history\n                if (navigator.app) {\n                    navigator.app.exitApp();\n                }\n                return;\n            }\n            if (backCount >= 0) {\n                return;\n            }\n            let stateName = $ionicHistory.backView().stateName;\n\n            // Use backCount to find next state only if its defined, else pass as it is to $ionicHistory.goBack\n            // which defaults to previous view transition\n            // Get current history stack and find the cursor for the new view\n            // Based on the new cursor, find the new state to transition to\n            if (!!backCount && !isNaN(parseInt(backCount))) {\n                let viewHistory = $ionicHistory.viewHistory();\n                let currentHistory = viewHistory.histories[$ionicHistory.currentView().historyId];\n                let newCursor = currentHistory.cursor + backCount;\n\n                // If new cursor is more than the max possible or less than zero, default it to first view in history\n                if (newCursor < 0 || newCursor > currentHistory.stack.length) {\n                    newCursor = 0;\n                }\n\n                stateName = currentHistory.stack[newCursor].stateName;\n            }\n            let currentStateTransition = angular.extend({}, $state.current);\n            let toStateTransition = angular.extend({}, $state.get(stateName));\n\n            unregisterToStateChangeStartEvent();\n            if (toStateTransition.nativeTransitionsBack === null) {\n                $log.debug('[native transition] transition disabled for this state', toStateTransition);\n                return $timeout(() => $ionicHistory.goBack(backCount)).then(() => registerToStateChangeStartEvent());\n            }\n            $log.debug('nativepagetransitions goBack', backCount, stateName, currentStateTransition, toStateTransition);\n            return transition('back', currentStateTransition, toStateTransition).then(function(){\n              return $timeout(() => $ionicHistory.goBack(backCount));\n            });\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-ionic-native-transitions/node_modules/ionic-native-transitions/lib/run.js":"/**\n * @ngdoc service\n * @name ionic-native-transitions.$ionicNativeTransitions\n * @description\n * ionic-native-transitions service\n */\n/**\n * @ngdoc service\n * @name ionic-native-transitions.$ionicNativeTransitionsProvider\n * @description\n * ionic-native-transitions provider\n */\nexport default function($ionicNativeTransitions, $ionicPlatform, $ionicHistory, $rootScope) {\n    'ngInject';\n\n    $ionicPlatform.ready(() => {\n        $ionicNativeTransitions.init();\n    });\n};\n"}